{"version":3,"sources":["img/app-store-icon.svg","components/WelcomeMenu.js","App.js","serviceWorker.js","index.js","img/logo.png","img/play-store-icon.svg"],"names":["module","exports","__webpack_require__","p","WelcomeMenu","cssAfterAnimation","welcomeMenu","opacity","logo","top","height","suggestButton","extraInfo","startAnimation","anime","timeline","add","delay","targets","easing","duration","_this","this","Platform","DeviceType","console","log","react_default","a","createElement","className","src","alt","playStoreIcon","appStoreIcon","Component","App","components_WelcomeMenu","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0TC8FzBC,6MAvDbC,kBAAoB,CAClBC,YAAa,CACXC,QAAS,IAEXC,KAAM,CACJD,QAAS,GACTE,IAAK,OACLC,OAAQ,OAEVC,cAAe,CACbJ,QAAS,GACTE,IAAK,MAEPG,UAAW,CACTL,QAAS,MAIbM,eAAiB,WACYC,IAAMC,WAE9BC,IAAI,CACHC,MAAO,IACPC,QAAS,eACTC,OAAQ,gBACRC,SAAU,IACVb,QAASc,EAAKhB,kBAAkBC,YAAYC,UAE7CS,IAAI,CACHC,MAAO,IACPC,QAAS,QACTC,OAAQ,gBACRC,SAAU,IACVb,QAASc,EAAKhB,kBAAkBG,KAAKD,QACrCG,OAAQW,EAAKhB,kBAAkBG,KAAKE,OACpCD,IAAKY,EAAKhB,kBAAkBG,KAAKC,MAElCO,IAAI,CACHC,MAAO,EACPC,QAAS,kBACTC,OAAQ,gBACRC,SAAU,IACVb,QAASc,EAAKhB,kBAAkBM,cAAcJ,QAC9CE,IAAKY,EAAKhB,kBAAkBM,cAAcF,MAE3CO,IAAI,CACHC,MAAO,EACPC,QAAS,cACTC,OAAQ,gBACRC,SAAU,IACVb,QAASc,EAAKhB,kBAAkBO,UAAUL,8FA/E9Ce,KAAKT,kDASL,MAL2B,UAAvBU,IAASC,WACXC,QAAQC,IAAI,oBAEZD,QAAQC,IAAI,wBAGZC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKvB,IAAMsB,UAAU,OAAOE,IAAI,SACrCL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAiBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAb,yCACnCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKE,IAAeH,UAAU,aAAaE,IAAI,gBAEtDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKG,IAAcJ,UAAU,aAAaE,IAAI,gBAGvDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAASH,EAAAC,EAAAC,cAAA,mIAxBRM,aCMXC,0LARX,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACQ,EAAD,cAJUF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBrD,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.db95ae62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/app-store-icon.9cc2a278.svg\";","import React, { Component } from 'react';\nimport logo from '../img/logo.png';\nimport playStoreIcon from '../img/play-store-icon.svg';\nimport appStoreIcon from '../img/app-store-icon.svg';\nimport '../css/WelcomeMenu.css';\nimport anime from 'animejs';\nimport Platform from 'react-platform-js'\n\nclass WelcomeMenu extends Component {\n  componentDidMount() {\n    this.startAnimation();\n  }\n\n  render() {\n    if (Platform.DeviceType == 'mobile') {\n      console.log('this is a mobile');\n    } else { \n      console.log('this is not a mobile');\n    }\n    return(\n      <div className=\"welcomeMenu\">\n        <img src={logo} className=\"logo\" alt=\"logo\" />\n        <button className=\"suggest-button\"><p className=\"suggest-button-text\">إقتراح</p></button>\n        <div className=\"extra-info\">\n          <div className=\"download-application-links\">\n            <div className=\"store-icon-div play-store-icon\">\n              <img src={playStoreIcon} className=\"store-icon\" alt=\"play store\" />\n            </div>\n            <div className=\"store-icon-div app-store-icon\">\n              <img src={appStoreIcon} className=\"store-icon\" alt=\"app store\" />\n            </div>\n          </div>\n          <div className=\"rights\"><p>2019 © جميع الحقوق محفوظة</p></div>\n        </div>\n      </div>\n    );\n  }\n\n  // Animation Section\n  cssAfterAnimation = {\n    welcomeMenu: {\n      opacity: 0.9,\n    },\n    logo: {\n      opacity: 0.9,\n      top: '25px',\n      height: '46%',\n    },\n    suggestButton: {\n      opacity: 0.8,\n      top: '8%',\n    },\n    extraInfo: {\n      opacity: 1,\n    }\n  }\n\n  startAnimation = () => {\n    var welcomeMenuAnimation = anime.timeline();\n    welcomeMenuAnimation\n      .add({\n        delay: 500,\n        targets: '.welcomeMenu',\n        easing: 'easeInOutSine',\n        duration: 300,\n        opacity: this.cssAfterAnimation.welcomeMenu.opacity,\n      })\n      .add({\n        delay: 250,\n        targets: '.logo',\n        easing: 'easeInOutSine',\n        duration: 500,\n        opacity: this.cssAfterAnimation.logo.opacity,\n        height: this.cssAfterAnimation.logo.height,\n        top: this.cssAfterAnimation.logo.top,\n      })\n      .add({\n        delay: 0,\n        targets: '.suggest-button',\n        easing: 'easeInOutSine',\n        duration: 500,\n        opacity: this.cssAfterAnimation.suggestButton.opacity,\n        top: this.cssAfterAnimation.suggestButton.top,\n      })\n      .add({\n        delay: 0,\n        targets: '.extra-info',\n        easing: 'easeInOutSine',\n        duration: 300,\n        opacity: this.cssAfterAnimation.extraInfo.opacity,\n      })\n  }\n}\n\nexport default WelcomeMenu;","import React, { Component } from 'react';\nimport WelcomeMenu from './components/WelcomeMenu';\nimport './css/App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WelcomeMenu/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.9dd676e4.png\";","module.exports = __webpack_public_path__ + \"static/media/play-store-icon.f7dfa1e7.svg\";"],"sourceRoot":""}